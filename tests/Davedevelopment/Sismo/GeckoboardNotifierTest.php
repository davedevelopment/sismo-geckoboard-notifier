<?php
namespace Davedevelopment\Sismo;

/**
 * Test class for GeckoboardNotifier.
 * Generated by PHPUnit on 2012-02-25 at 21:59:23.
 */
class GeckoboardNotifierTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var GeckoboardNotifier
     */
    protected $object;

    /**
     * @var resource
     */
    protected $handle;

    /**
     * Mock data
     */
    protected $mockProjectSlug = 'mockProjectSlug';
    protected $mockProjectName = 'mockProjectName';
    protected $mockCommitStatus = 'succeeded';
    protected $mockCommitStatusCode = 'success';
    protected $mockCommitSha = 'mockCommitSha';
    protected $mockCommitShortSha = 'mockCommitShortSha';
    protected $mockCommitAuthor = 'mockCommitAuthor';
    protected $mockCommitMessage = 'mockCommitMessage';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->apiKey = "my_api_key";
        $this->widget = "http://dave.com";
        $this->object = new GeckoboardNotifier(
            $this->apiKey,
            $this->widget
        );

        $that = $this;

        $this->mockPost = function($url, array $headers = array(), $data) use ($that) {
            $that->lastUrl = $url;
            $that->lastData = $data;
            $that->lastHeaders = $headers;
        };

        $this->object->setPoster($this->mockPost);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testNotify()
    {
        $data = $this->getDataStub();
        $commit = $this->getCommitMock();
        $this->object->notify($commit);
        $this->assertEquals(json_encode($data), $this->lastData);
        $this->assertEquals($this->widget, $this->lastUrl);
    }

    /**
     * 
     */
    public function testNotifySendsAlertType()
    {
        $this->mockCommitStatus = 'failed';
        $this->mockCommitStatusCode = 'failed';
        $data = $this->getDataStub();
        $data['data']['item'][0]['type'] = 1;
        $commit = $this->getCommitMock();
        $this->object->notify($commit);
        $this->assertEquals(json_encode($data), $this->lastData);
        $this->assertEquals($this->widget, $this->lastUrl);
    }

    /**
     * 
     */
    public function testNotifyUsesCustomStringFormat()
    {
        $format = "[%STATUS%]";
        $data = $this->getDataStub();
        $data['data']['item'][0]['text'] = "[SUCCEEDED]";
        $commit = $this->getCommitMock();
        $this->object->setFormat($format);
        $this->object->notify($commit);
        $this->assertEquals(json_encode($data), $this->lastData);
        $this->assertEquals($this->widget, $this->lastUrl);
    }

    /**
     * 
     */
    public function testNotifyUsesCustomCallableFormat()
    {
        $format = function(\Sismo\Commit $commit) {
            return "dave123";
        };

        $data = $this->getDataStub();
        $data['data']['item'][0]['text'] = "dave123";
        $commit = $this->getCommitMock(false);
        $this->object->setFormat($format);
        $this->object->notify($commit);
        $this->assertEquals(json_encode($data), $this->lastData);
        $this->assertEquals($this->widget, $this->lastUrl);
    }

    /**
     * Test the actual HTTP POST by firing it at a local web server
     */
    public function testNotifyForReal()
    {
        $this->object->setPoster(null);
        $this->object->setWidgetUrl("http://127.0.0.1:5555/mywidget");
        $data = $this->getDataStub();
        $commit = $this->getCommitMock();

        $this->startServer();
        $this->object->notify($commit);
        $request = $this->getLastRequest();

        $this->assertContains("POST /mywidget", $request);
        $this->assertContains(json_encode($data), $request);
    }

    /**
     * StartServer
     *
     */
    protected function startServer()
    {
        if (!is_resource($this->handle)) { // should really check it's running properly
            $this->handle = popen('node ' . __DIR__ . '/server.js 5555 | tee -a /tmp/sgn-server.log', 'r');
            $serverRunning = fgets($this->handle);

            if (strpos($serverRunning, 'Server running') !== 0) {
                throw new \RunTimeException('Could not start mock server: ' . $serverRunning);
            }
        }
    }

    /**
     * Get last request
     */
    protected function getLastRequest()
    {
        return stream_get_contents($this->handle);
    }

    /**
     *
     * Get commit mock
     *
     * @param bool $withDefaultExpectations
     * @return Mock...
     */
    protected function getCommitMock($withProject = true, $withDefaultExpectations = true)
    {
        $commit = $this->getMock("\\Sismo\\Commit", array(), array(), "", array());

        if ($withProject) {
            $project = $this->getMock("\\Sismo\\Project", array(), array(), "", array());

            $commit->expects($this->any())
                   ->method("getProject")
                   ->will($this->returnValue($project));

            if ($withDefaultExpectations) {
                $project->expects($this->atLeastOnce())
                        ->method("getSlug")
                        ->will($this->returnValue($this->mockProjectSlug));

                $project->expects($this->atLeastOnce())
                        ->method("getName")
                        ->will($this->returnValue($this->mockProjectName));

                $commit->expects($this->atLeastOnce())
                       ->method("getStatus")
                       ->will($this->returnValue($this->mockCommitStatus));

                $commit->expects($this->atLeastOnce())
                       ->method("getStatusCode")
                       ->will($this->returnValue($this->mockCommitStatusCode));

                $commit->expects($this->atLeastOnce())
                       ->method("getSha")
                       ->will($this->returnValue($this->mockCommitSha));

                $commit->expects($this->atLeastOnce())
                       ->method("getShortSha")
                       ->will($this->returnValue($this->mockCommitShortSha));

                $commit->expects($this->atLeastOnce())
                       ->method("getAuthor")
                       ->will($this->returnValue($this->mockCommitAuthor));

                $commit->expects($this->atLeastOnce())
                       ->method("getMessage")
                       ->will($this->returnValue($this->mockCommitMessage));
            }
        }

        return $commit;
    }



    /**
     * Get url stub
     *
     * Saves repeating in tests
     *
     */
    protected function getUrlStub()
    {
        return "https://push.geckoboard.com/v1/send/" . $this->widgetKey;
    }

    /**
     * Get Data stub
     *
     * Saves repeating in tests
     *
     */
    protected function getDataStub()
    {
        $data = array(
            "apiKey" => $this->apiKey,
            "data" => array(
                "item" => array(
                    array(
                        "text" => sprintf(
                            "[%s]\n%s\n%s",
                            strtoupper($this->mockCommitStatus),
                            $this->mockCommitMessage,
                            $this->mockCommitAuthor
                        ),
                        "type" => 2,
                    ),
                ),
            ),
        );

        return $data;
    }
}
?>
